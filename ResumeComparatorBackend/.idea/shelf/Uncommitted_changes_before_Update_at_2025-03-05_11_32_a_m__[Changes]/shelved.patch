Index: DjangoApp/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nURL configuration for DjangoApp project.\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\n# from django.contrib import admin\r\nfrom django.urls import path\r\n\r\nurlpatterns = [\r\n    #    path('admin/', admin.site.urls),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DjangoApp/urls.py b/DjangoApp/urls.py
--- a/DjangoApp/urls.py	(revision c203272ab9409b4a6ff90b5e3864f4ffece221ee)
+++ b/DjangoApp/urls.py	(date 1741188755794)
@@ -14,9 +14,15 @@
     1. Import the include() function: from django.urls import include, path
     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
 """
-# from django.contrib import admin
+from django.conf.urls.static import static
 from django.urls import path
+from DjangoApp import settings  # Import settings for MEDIA_URL configuration
+from ResumeComparatorBackend.views import process_resume  # Import API endpoint
 
+# Define application routes
 urlpatterns = [
-    #    path('admin/', admin.site.urls),
+    path("process-resume/", process_resume, name="process_resume"),  # Resume processing endpoint
 ]
+
+# Serve media files (useful for handling uploaded files during development)
+urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
\ No newline at end of file
Index: DjangoApp/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for DjangoApp project.\r\n\r\nGenerated by 'django-admin startproject' using Django 5.1.6.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-a!2#=%w%#!#zga*8lb)!9tx3^#k&a*8sizbt5a$(4sk)=%!i-o'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'ResumeComparatorBackend.apps.ResumecomparatorbackendConfig',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'DjangoApp.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates']\r\n        ,\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'DjangoApp.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DjangoApp/settings.py b/DjangoApp/settings.py
--- a/DjangoApp/settings.py	(revision c203272ab9409b4a6ff90b5e3864f4ffece221ee)
+++ b/DjangoApp/settings.py	(date 1741183718382)
@@ -9,9 +9,11 @@
 For the full list of settings and their values, see
 https://docs.djangoproject.com/en/5.1/ref/settings/
 """
-
+import os
 from pathlib import Path
 
+from django.template.context_processors import media
+
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
 BASE_DIR = Path(__file__).resolve().parent.parent
 
@@ -122,3 +124,6 @@
 # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
 
 DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+
+MEDIA_URL = "/media/"
+MEDIA_ROOT = os.path.join(BASE_DIR, "media")
Index: ResumeComparatorBackend/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\r\n\r\n# Create your views here.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ResumeComparatorBackend/views.py b/ResumeComparatorBackend/views.py
--- a/ResumeComparatorBackend/views.py	(revision c203272ab9409b4a6ff90b5e3864f4ffece221ee)
+++ b/ResumeComparatorBackend/views.py	(date 1741188584157)
@@ -1,3 +1,54 @@
-from django.shortcuts import render
+"""
+views.py - Handles API endpoint for processing resumes.
+
+This module includes:
+- `process_resume`: API to handle file uploads, process resumes, and return structured results.
+
+"""
+
+import os
+from django.http import JsonResponse
+from django.views.decorators.csrf import csrf_exempt
+
+# Import processing utilities
+from .processor import ResumeProcessor
+from .utils import Utils, CountFrequency  # Utility classes for text processing
 
-# Create your views here.
+@csrf_exempt
+def process_resume(request):
+    """
+    API endpoint to handle resume file uploads and process them.
+
+    Supported Request:
+    - `POST`: Accepts a file (`resume`), processes it using `ResumeProcessor`, and returns structured results.
+
+    Returns:
+    - JSON response containing:
+        - `cleaned_text`: Processed text output
+        - `sections`: Extracted resume sections
+        - `word_frequency`: Word count analysis
+        - `keywords`: Extracted keywords
+        - `contacts`: Emails, phone numbers, and links
+    - Error messages if any issues occur.
+
+    author: shobhitrajain
+    date: 2023-09-12
+    """
+    if request.method == "POST":
+        # Ensure the request contains a file
+        if "resume" not in request.FILES:
+            return JsonResponse({"error": "No resume file found in request"}, status=400)
+
+        uploaded_resume = request.FILES["resume"]
+
+        try:
+            # Initialize ResumeProcessor and process the uploaded file
+            processor = ResumeProcessor(uploaded_resume)
+            result = processor.process()
+
+            return JsonResponse(result, status=200)  # Send processed data
+        except Exception as e:
+            return JsonResponse({"error": str(e)}, status=500)
+
+    # Return error if request method is not POST
+    return JsonResponse({"error": "Invalid request method"}, status=405)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"26d74a4c-992e-4b3a-bf7f-8569bfdea1d5\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"associatedIndex\": 1\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2trWVQJ328aIW6PsxM7RvDpOBDJ\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Django Server.ResumeComparatorBackend.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenDjangoStructureViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"ResumeComparatorBackend\" type=\"Python.DjangoServer\" factoryName=\"Django server\">\r\n      <module name=\"ResumeComparatorBackend\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n        <env name=\"DJANGO_SETTINGS_MODULE\" value=\"DjangoApp.settings\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <option name=\"port\" value=\"8000\" />\r\n      <option name=\"host\" value=\"\" />\r\n      <option name=\"additionalOptions\" value=\"\" />\r\n      <option name=\"browserUrl\" value=\"\" />\r\n      <option name=\"runTestServer\" value=\"false\" />\r\n      <option name=\"runNoReload\" value=\"false\" />\r\n      <option name=\"useCustomRunCommand\" value=\"false\" />\r\n      <option name=\"customRunCommand\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-1632447f56bf-JavaScript-PY-243.25659.43\" />\r\n        <option value=\"bundled-python-sdk-181015f7ab06-4df51de95216-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.25659.43\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"26d74a4c-992e-4b3a-bf7f-8569bfdea1d5\" name=\"Changes\" comment=\"\" />\r\n      <created>1741110696996</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1741110696996</updated>\r\n      <workItem from=\"1741110698002\" duration=\"31000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c203272ab9409b4a6ff90b5e3864f4ffece221ee)
+++ b/.idea/workspace.xml	(date 1741188600936)
@@ -1,15 +1,40 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
-    <list default="true" id="26d74a4c-992e-4b3a-bf7f-8569bfdea1d5" name="Changes" comment="" />
+    <list default="true" id="26d74a4c-992e-4b3a-bf7f-8569bfdea1d5" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ResumeComparatorBackend/processor.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ResumeComparatorBackend/utils.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DjangoApp/settings.py" beforeDir="false" afterPath="$PROJECT_DIR$/DjangoApp/settings.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DjangoApp/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/DjangoApp/urls.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ResumeComparatorBackend/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/ResumeComparatorBackend/views.py" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 1
-}]]></component>
+  <component name="DjangoConsoleOptions" custom-start-script="import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)">
+    <option name="myCustomStartScript" value="import sys; print('Python %s on %s' % (sys.version, sys.platform))&#10;import django; print('Django %s' % django.get_version())&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;if 'setup' in dir(django): django.setup()&#10;import django_manage_shell; django_manage_shell.run(PROJECT_ROOT)" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
+  </component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 1
+}</component>
   <component name="ProjectId" id="2trWVQJ328aIW6PsxM7RvDpOBDJ" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
@@ -20,10 +45,26 @@
     "Django Server.ResumeComparatorBackend.executor": "Run",
     "RunOnceActivity.OpenDjangoStructureViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
+    "RunOnceActivity.git.unshallow": "true",
+    "RunOnceActivity.pycharm.django.structure.promotion.once.per.project": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "git-widget-placeholder": "main",
+    "ignore.virus.scanning.warn.message": "true",
+    "last_opened_file_path": "C:/GitHub/resume_comparator/ResumeComparatorBackend/ResumeComparatorBackend",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
     "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
     "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\GitHub\resume_comparator\ResumeComparatorBackend\ResumeComparatorBackend" />
+    </key>
+  </component>
   <component name="RunManager">
     <configuration name="ResumeComparatorBackend" type="Python.DjangoServer" factoryName="Django server">
       <module name="ResumeComparatorBackend" />
@@ -54,8 +95,8 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-js-predefined-d6986cc7102b-1632447f56bf-JavaScript-PY-243.25659.43" />
-        <option value="bundled-python-sdk-181015f7ab06-4df51de95216-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.25659.43" />
+        <option value="bundled-js-predefined-d6986cc7102b-76f8388c3a79-JavaScript-PY-243.24978.54" />
+        <option value="bundled-python-sdk-91e3b7efe1d4-466328ff949b-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.24978.54" />
       </set>
     </attachedChunks>
   </component>
@@ -68,10 +109,22 @@
       <option name="presentableId" value="Default" />
       <updated>1741110696996</updated>
       <workItem from="1741110698002" duration="31000" />
+      <workItem from="1741111258469" duration="14045000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
 </project>
\ No newline at end of file
Index: ResumeComparatorBackend/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ResumeComparatorBackend/utils.py b/ResumeComparatorBackend/utils.py
new file mode 100644
--- /dev/null	(date 1741188388897)
+++ b/ResumeComparatorBackend/utils.py	(date 1741188388897)
@@ -0,0 +1,116 @@
+"""
+utils.py - Utility functions for text extraction, cleaning, and keyword processing.
+
+Includes:
+- Text extraction from PDF/DOCX
+- Data cleaning and NLP processing
+- Keyword extraction using TF-IDF
+
+author: shobhitrajain
+date: 2023-04-11
+"""
+
+import os
+import fitz  # PyMuPDF for PDFs
+import docx
+import spacy
+import re
+
+class Utils:
+    """Utility class for text extraction, cleaning, and processing."""
+
+    # Load spaCy model once for efficiency
+    nlp = spacy.load("en_core_web_md")
+
+    # Predefined regex patterns for extracting contact details
+    REGEX_PATTERNS = {
+        "email_pattern": r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b",
+        "phone_pattern": r"\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}",
+        "link_pattern": r"\b(?:https?://|www\.)\S+\b",
+    }
+
+    # Common resume section headers
+    RESUME_SECTIONS = [
+        "Contact Information", "Objective", "Summary", "Education", "Experience",
+        "Skills", "Projects", "Certifications", "Licenses", "Awards", "Honors",
+        "Publications", "References", "Technical Skills", "Computer Skills",
+        "Programming Languages", "Software Skills", "Soft Skills", "Language Skills",
+        "Professional Skills", "Work Experience", "Employment History", "Internship Experience",
+    ]
+
+    @staticmethod
+    def extract_text(file_path):
+        """Extract text from a PDF or DOCX file."""
+        ext = os.path.splitext(file_path)[1].lower()
+
+        if ext == ".pdf":
+            return Utils.extract_text_from_pdf(file_path)
+        elif ext == ".docx":
+            return Utils.extract_text_from_docx(file_path)
+        else:
+            raise ValueError("Unsupported file format")
+
+    @staticmethod
+    def extract_text_from_pdf(pdf_path):
+        """Extract text from a PDF file using PyMuPDF."""
+        try:
+            text = ""
+            with fitz.open(pdf_path) as doc:
+                for page in doc:
+                    text += page.get_text("text")
+            return text.strip()
+        except Exception as e:
+            return f"Error reading PDF: {str(e)}"
+
+    @staticmethod
+    def extract_text_from_docx(docx_path):
+        """Extract text from a DOCX file."""
+        try:
+            doc = docx.Document(docx_path)
+            return "\n".join([para.text.strip() for para in doc.paragraphs if para.text.strip()])
+        except Exception as e:
+            return f"Error reading DOCX: {str(e)}"
+
+    @staticmethod
+    def remove_emails_links(text):
+        """Remove emails, phone numbers, and links from text."""
+        for pattern in Utils.REGEX_PATTERNS.values():
+            text = re.sub(pattern, "", text)
+        return text
+
+    @staticmethod
+    def clean_text(text):
+        """Preprocess text by removing filler words and extracting key phrases."""
+        text = text.lower()
+        text = Utils.remove_emails_links(text)
+        doc = Utils.nlp(text)
+
+        important_words = [token.lemma_ for token in doc if token.is_alpha and not token.is_stop]
+        return " ".join(important_words)
+
+
+class CountFrequency:
+    """Class for counting word frequency in text using spaCy NLP."""
+
+    def __init__(self, text):
+        """
+        Initialize CountFrequency with text.
+
+        :param text: The processed resume text.
+        """
+        self.text = text
+        self.doc = Utils.nlp(text)  # Use the spaCy model from Utils
+
+    def count_frequency(self):
+        """
+        Count the frequency of different word types (e.g., nouns, verbs, adjectives).
+
+        :return: A dictionary containing part-of-speech frequencies.
+        """
+        pos_freq = {}
+        for token in self.doc:
+            if token.pos_ in pos_freq:
+                pos_freq[token.pos_] += 1
+            else:
+                pos_freq[token.pos_] = 1
+        return pos_freq
Index: ResumeComparatorBackend/processor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ResumeComparatorBackend/processor.py b/ResumeComparatorBackend/processor.py
new file mode 100644
--- /dev/null	(date 1741188281305)
+++ b/ResumeComparatorBackend/processor.py	(date 1741188281305)
@@ -0,0 +1,155 @@
+"""
+processor.py - Handles text extraction, cleaning, and processing of resumes.
+
+This module includes:
+- `ResumeProcessor`: Extracts, cleans, and analyzes resume content.
+- Uses `Utils` from utils.py for text extraction and NLP processing.
+
+author: shobhitrajain
+date: 2023-04-11
+"""
+
+import os
+import numpy as np
+import spacy
+import re
+from .utils import Utils, CountFrequency
+from sklearn.feature_extraction.text import TfidfVectorizer
+
+# Load the spaCy NLP model once for efficiency
+nlp = spacy.load("en_core_web_md")
+
+
+class ResumeProcessor:
+    """Handles text extraction, cleaning, and processing for resumes."""
+
+    def __init__(self, uploaded_resume):
+        """
+        Initializes the ResumeProcessor with the uploaded resume file.
+
+        :param uploaded_resume: File object representing the uploaded resume.
+        """
+        self.uploaded_resume = uploaded_resume
+        self.temp_path = f"{uploaded_resume.name}"  # Temporary file path
+
+    def save_temp_file(self):
+        """Save uploaded resume temporarily for processing."""
+        with open(self.temp_path, "wb") as f:
+            for chunk in self.uploaded_resume.chunks():
+                f.write(chunk)
+
+    def extract_text(self):
+        """Extract raw text from the uploaded resume using file processing utilities."""
+        return Utils.extract_text(self.temp_path)
+
+    def clean_text(self, text):
+        """Clean extracted text by removing stopwords and performing NLP preprocessing."""
+        return Utils.clean_text(text)
+
+    @staticmethod
+    def extract_sections(text):
+        """
+        Extract predefined sections from the resume based on common headings.
+
+        :param text: The raw extracted resume text.
+        :return: A dictionary where keys are section names and values are the section content.
+        """
+        sections = {}
+        current_section = "General"
+        sections[current_section] = []
+
+        for line in text.split("\n"):
+            line = line.strip()
+            if not line:
+                continue
+
+            # Check if line matches a known resume section
+            if any(re.search(rf"\b{section}\b", line, re.IGNORECASE) for section in Utils.RESUME_SECTIONS):
+                current_section = line.strip(":")  # Remove trailing colon if any
+                sections[current_section] = []
+            else:
+                sections[current_section].append(line)
+
+        # Remove empty sections and return structured output
+        return {section: " ".join(content) for section, content in sections.items() if content}
+
+    @staticmethod
+    def extract_keywords(text, num_keywords=10):
+        """
+        Extract top keywords from resume text using TF-IDF.
+
+        :param text: Processed resume text.
+        :param num_keywords: Number of top keywords to return.
+        :return: A list of important keywords.
+        """
+        vectorizer = TfidfVectorizer(stop_words='english', max_features=50)
+        tfidf_matrix = vectorizer.fit_transform([text])
+
+        feature_array = np.array(vectorizer.get_feature_names_out())
+        tfidf_sorting = np.argsort(tfidf_matrix.toarray()).flatten()[::-1]
+
+        top_keywords = feature_array[tfidf_sorting][:num_keywords]
+        return list(top_keywords)
+
+    @staticmethod
+    def extract_contacts(text):
+        """
+        Extract contact information such as emails, phone numbers, and links from text.
+
+        :param text: Resume text.
+        :return: A dictionary containing extracted emails, links, and phone numbers.
+        """
+        emails = re.findall(Utils.REGEX_PATTERNS["email_pattern"], text)
+        links = re.findall(Utils.REGEX_PATTERNS["link_pattern"], text)
+        phones = re.findall(Utils.REGEX_PATTERNS["phone_pattern"], text)
+
+        return {
+            "emails": emails if emails else "No email found",
+            "links": links if links else "No links found",
+            "phones": phones if phones else "No phone numbers found",
+        }
+
+    def count_word_frequency(self, text):
+        """
+        Count the frequency of words in the processed text.
+
+        :param text: Processed resume text.
+        :return: A dictionary with word categories and their counts.
+        """
+        return CountFrequency(text).count_frequency()
+
+    def process(self):
+        """
+        Executes the full pipeline for processing resumes.
+
+        Steps:
+        - Save uploaded file
+        - Extract raw text
+        - Clean text
+        - Identify resume sections
+        - Count word frequencies
+        - Extract important keywords
+        - Extract contact information
+
+        :return: A structured dictionary with processed resume data.
+        """
+        try:
+            self.save_temp_file()
+            raw_text = self.extract_text()
+            cleaned_text = self.clean_text(raw_text)
+            sections = self.extract_sections(raw_text)
+            word_frequency = self.count_word_frequency(cleaned_text)
+            keywords = self.extract_keywords(cleaned_text)
+            contacts = self.extract_contacts(raw_text)
+
+            return {
+                "cleaned_text": cleaned_text,
+                "sections": sections,
+                "word_frequency": word_frequency,
+                "keywords": keywords,
+                "contacts": contacts
+            }
+        except Exception as e:
+            return {"error": str(e)}
+        finally:
+            os.remove(self.temp_path)  # Cleanup temporary file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.11 (ResumeComparatorBackend)\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c203272ab9409b4a6ff90b5e3864f4ffece221ee)
+++ b/.idea/misc.xml	(date 1741112907170)
@@ -3,4 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.11 (ResumeComparatorBackend)" />
   </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (ResumeComparatorBackend)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1741112907183)
+++ b/.idea/vcs.xml	(date 1741112907183)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
